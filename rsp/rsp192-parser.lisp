(defpackage :tls-aes-rsp192-parser
  (:use :cl :tls-aes-utils :tls-aes192 :tls-aes-ghash :tls-aes192-gcm))

(in-package :tls-aes-rsp192-parser)

(defun bracketed-line-p (line)
  "Returns true if line starts with [ and ends with ]."
  (and (> (length line) 2)
       (char= (char line 0) #\[)
       (char= (char line (1- (length line))) #\])))

(defun starts-with (prefix string)
  "Returns T if STRING starts with PREFIX."
  (and (<= (length prefix) (length string))
       (string= prefix (subseq string 0 (length prefix)))))

(defun parse-ecb192-rsp (filename)
  "Parses a NIST ECB192 .rsp file and returns a list of test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (setf mode (if (string= line "[ENCRYPT]") :encrypt :skip)))
              ((string= line "") nil) ; skip blank lines
              ((eq mode :encrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "PLAINTEXT = " line)
                  (setf (gethash "PLAINTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 12))))
                 ((starts-with "CIPHERTEXT = " line)
                  (progn
                    (setf (gethash "CIPHERTEXT" current-case)
                          (hex-string-to-byte-vector (subseq line 12)))
                    (format t "~%Parsed ECB192 test case ~D" (gethash "COUNT" current-case))
                    (push current-case cases)
                    (setf current-case (make-hash-table :test 'equal))))))))
      (nreverse cases))))

(defun parse-ecb192-rsp-decrypt (filename)
  "Parses a NIST ECB192 .rsp file and returns a list of test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (setf mode (if (string= line "[DECRYPT]") :decrypt :skip)))
              ((string= line "") nil) ; skip blank lines
              ((eq mode :decrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "CIPHERTEXT = " line)
                  (setf (gethash "CIPHERTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 12))))
                 ((starts-with "PLAINTEXT = " line)
                  (progn
                    (setf (gethash "PLAINTEXT" current-case)
                          (hex-string-to-byte-vector (subseq line 12)))
                    (format t "~%Parsed ECB192 DECRYPT test case ~D" (gethash "COUNT" current-case))
                    (push current-case cases)
                    (setf current-case (make-hash-table :test 'equal))))))))
      (nreverse cases))))

(defun parse-cbc192-rsp (filename)
  "Parses a NIST CBC192 .rsp file and returns a list of ENCRYPT test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (cond
                 ((string= line "[ENCRYPT]") (setf mode :encrypt))
                 ((string= line "[DECRYPT]") (setf mode :skip))))
              ((string= line "") nil) ; skip blank lines
              ((eq mode :encrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "IV = " line)
                  (setf (gethash "IV" current-case)
                        (hex-string-to-byte-vector (subseq line 5))))
                 ((starts-with "PLAINTEXT = " line)
                  (setf (gethash "PLAINTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 11))))
                 ((starts-with "CIPHERTEXT = " line)
                  (setf (gethash "CIPHERTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 12)))
                  (format t "~%Parsed CBC192 test case ~D" (gethash "COUNT" current-case))
                  (push current-case cases)
                  (setf current-case (make-hash-table :test 'equal)))))))
      (nreverse cases))))

(defun parse-cbc192-rsp-decrypt (filename)
  "Parses a NIST CBC192 .rsp file and returns a list of DECRYPT test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (cond
                 ((string= line "[DECRYPT]") (setf mode :decrypt))
                 ((string= line "[ENCRYPT]") (setf mode :skip))))
              ((string= line "") nil) ; skip blank lines
              ((eq mode :decrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "IV = " line)
                  (setf (gethash "IV" current-case)
                        (hex-string-to-byte-vector (subseq line 5))))
                 ((starts-with "CIPHERTEXT = " line)
                  (setf (gethash "CIPHERTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 12))))
                 ((starts-with "PLAINTEXT = " line)
                  (setf (gethash "PLAINTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 11)))
                  (format t "~%Parsed CBC192 decrypt test case ~D" (gethash "COUNT" current-case))
                  (push current-case cases)
                  (setf current-case (make-hash-table :test 'equal)))))))
      (nreverse cases))))

(defun parse-ctr192-rsp (filename)
  "Parses a NIST CTR192 .rsp file and returns a list of ENCRYPT test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (cond
                 ((string= line "[ENCRYPT]") (setf mode :encrypt))
                 ((string= line "[DECRYPT]") (setf mode :skip))))
              ((string= line "") nil)
              ((eq mode :encrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "IV = " line)
                  (setf (gethash "IV" current-case)
                        (hex-string-to-byte-vector (subseq line 5))))
                 ((starts-with "PLAINTEXT = " line)
                  (setf (gethash "PLAINTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 11))))
                 ((starts-with "CIPHERTEXT = " line)
                  (setf (gethash "CIPHERTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 12)))
                  (format t "~%Parsed CTR192 test case ~D" (gethash "COUNT" current-case))
                  (push current-case cases)
                  (setf current-case (make-hash-table :test 'equal)))))))
      (nreverse cases))))

(defun parse-ctr192-rsp-decrypt (filename)
  "Parses a NIST CTR192 .rsp file and returns a list of DECRYPT test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (cond
                 ((string= line "[DECRYPT]") (setf mode :decrypt))
                 ((string= line "[ENCRYPT]") (setf mode :skip))))
              ((string= line "") nil)
              ((eq mode :decrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "IV = " line)
                  (setf (gethash "IV" current-case)
                        (hex-string-to-byte-vector (subseq line 5))))
                 ((starts-with "CIPHERTEXT = " line)
                  (setf (gethash "CIPHERTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 12))))
                 ((starts-with "PLAINTEXT = " line)
                  (setf (gethash "PLAINTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 11)))
                  (format t "~%Parsed CTR192 test case ~D" (gethash "COUNT" current-case))
                  (push current-case cases)
                  (setf current-case (make-hash-table :test 'equal)))))))
      (nreverse cases))))

(defun parse-ofb192-rsp (filename)
  "Parses a NIST OFB192 .rsp file and returns a list of ENCRYPT test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (cond
                 ((string= line "[ENCRYPT]") (setf mode :encrypt))
                 ((string= line "[DECRYPT]") (setf mode :skip))))
              ((string= line "") nil)
              ((eq mode :encrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "IV = " line)
                  (setf (gethash "IV" current-case)
                        (hex-string-to-byte-vector (subseq line 5))))
                 ((starts-with "PLAINTEXT = " line)
                  (setf (gethash "PLAINTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 11))))
                 ((starts-with "CIPHERTEXT = " line)
                  (setf (gethash "CIPHERTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 12)))
                  (format t "~%Parsed OFB192 test case ~D" (gethash "COUNT" current-case))
                  (push current-case cases)
                  (setf current-case (make-hash-table :test 'equal)))))))
      (nreverse cases))))

(defun parse-ofb192-rsp-decrypt (filename)
  "Parses a NIST OFB192 .rsp file and returns a list of DECRYPT test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (cond
                 ((string= line "[DECRYPT]") (setf mode :decrypt))
                 ((string= line "[ENCRYPT]") (setf mode :skip))))
              ((string= line "") nil)
              ((eq mode :decrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "IV = " line)
                  (setf (gethash "IV" current-case)
                        (hex-string-to-byte-vector (subseq line 5))))
                 ((starts-with "CIPHERTEXT = " line)
                  (setf (gethash "CIPHERTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 12))))
                 ((starts-with "PLAINTEXT = " line)
                  (setf (gethash "PLAINTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 11)))
                  (format t "~%Parsed OFB192 test case ~D" (gethash "COUNT" current-case))
                  (push current-case cases)
                  (setf current-case (make-hash-table :test 'equal)))))))
      (nreverse cases))))

(defun parse-cfb192-rsp (filename)
  "Parses a NIST CFB192 .rsp file and returns a list of ENCRYPT test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (cond
                 ((string= line "[ENCRYPT]") (setf mode :encrypt))
                 ((string= line "[DECRYPT]") (setf mode :skip))))
              ((string= line "") nil)
              ((eq mode :encrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "IV = " line)
                  (setf (gethash "IV" current-case)
                        (hex-string-to-byte-vector (subseq line 5))))
                 ((starts-with "PLAINTEXT = " line)
                  (setf (gethash "PLAINTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 11))))
                 ((starts-with "CIPHERTEXT = " line)
                  (setf (gethash "CIPHERTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 12)))
                  (format t "~%Parsed CFB192 test case ~D" (gethash "COUNT" current-case))
                  (push current-case cases)
                  (setf current-case (make-hash-table :test 'equal)))))))
      (nreverse cases))))

(defun parse-cfb192-rsp-decrypt (filename)
  "Parses a NIST CFB192 .rsp file and returns a list of DECRYPT test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (cond
                 ((string= line "[DECRYPT]") (setf mode :decrypt))
                 ((string= line "[ENCRYPT]") (setf mode :skip))))
              ((string= line "") nil)
              ((eq mode :decrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "IV = " line)
                  (setf (gethash "IV" current-case)
                        (hex-string-to-byte-vector (subseq line 5))))
                 ((starts-with "CIPHERTEXT = " line)
                  (setf (gethash "CIPHERTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 12))))
                 ((starts-with "PLAINTEXT = " line)
                  (setf (gethash "PLAINTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 11)))
                  (format t "~%Parsed CFB192 test case ~D" (gethash "COUNT" current-case))
                  (push current-case cases)
                  (setf current-case (make-hash-table :test 'equal)))))))
      (nreverse cases))))

(defun parse192-cfb8-rsp (filename)
  "Parses a NIST CFB8 .rsp file and returns a list of ENCRYPT test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (cond
                 ((string= line "[ENCRYPT]") (setf mode :encrypt))
                 ((string= line "[DECRYPT]") (setf mode :skip))))
              ((string= line "") nil)
              ((eq mode :encrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "IV = " line)
                  (setf (gethash "IV" current-case)
                        (hex-string-to-byte-vector (subseq line 5))))
                 ((starts-with "PLAINTEXT = " line)
                  (setf (gethash "PLAINTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 11))))
                 ((starts-with "CIPHERTEXT = " line)
                  (setf (gethash "CIPHERTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 12)))
                  (format t "~%Parsed CFB8 test case ~D" (gethash "COUNT" current-case))
                  (push current-case cases)
                  (setf current-case (make-hash-table :test 'equal)))))))
      (nreverse cases))))

(defun parse192-cfb8-rsp-decrypt (filename)
  "Parses a NIST CFB8 .rsp file and returns a list of DECRYPT test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (cond
                 ((string= line "[DECRYPT]") (setf mode :decrypt))
                 ((string= line "[ENCRYPT]") (setf mode :skip))))
              ((string= line "") nil)
              ((eq mode :decrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "IV = " line)
                  (setf (gethash "IV" current-case)
                        (hex-string-to-byte-vector (subseq line 5))))
                 ((starts-with "CIPHERTEXT = " line)
                  (setf (gethash "CIPHERTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 12))))
                 ((starts-with "PLAINTEXT = " line)
                  (setf (gethash "PLAINTEXT" current-case)
                        (hex-string-to-byte-vector (subseq line 11)))
                  (format t "~%Parsed CFB8 test case ~D" (gethash "COUNT" current-case))
                  (push current-case cases)
                  (setf current-case (make-hash-table :test 'equal)))))))
      (nreverse cases))))

(defun parse192-cfb1-rsp (filename)
  "Parses a NIST CFB1 .rsp file and returns a list of ENCRYPT test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (cond
                 ((string= line "[ENCRYPT]") (setf mode :encrypt))
                 ((string= line "[DECRYPT]") (setf mode :skip))))
              ((string= line "") nil)
              ((eq mode :encrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "IV = " line)
                  (setf (gethash "IV" current-case)
                        (hex-string-to-byte-vector (subseq line 5))))
                 ((starts-with "PLAINTEXT = " line)
                  (setf (gethash "PLAINTEXT" current-case)
                        (bit-string-to-byte-vector (subseq line 11)))
		  (setf (gethash "PLAINTEXT-BITS" current-case)
			(length (string-trim '(#\Space #\Tab #\Return #\Newline) (subseq line 11)))))
                 ((starts-with "CIPHERTEXT = " line)
                  (setf (gethash "CIPHERTEXT" current-case)
                        (bit-string-to-byte-vector (subseq line 12)))
		  (setf (gethash "CIPHERTEXT-BITS" current-case)
			(length (string-trim '(#\Space #\Tab #\Return #\Newline) (subseq line 12))))
                  (format t "~%Parsed CFB1 test case ~D" (gethash "COUNT" current-case))
                  (push current-case cases)
                  (setf current-case (make-hash-table :test 'equal)))))))
      (nreverse cases))))

(defun parse192-cfb1-rsp-decrypt (filename)
  "Parses a NIST CFB1 .rsp file and returns a list of DECRYPT test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal))
          (mode :skip))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((starts-with "[" line)
               (cond
                 ((string= line "[DECRYPT]") (setf mode :decrypt))
                 ((string= line "[ENCRYPT]") (setf mode :skip))))
              ((string= line "") nil)
              ((eq mode :decrypt)
               (cond
                 ((starts-with "COUNT = " line)
                  (setf (gethash "COUNT" current-case)
                        (parse-integer (subseq line 8))))
                 ((starts-with "KEY = " line)
                  (setf (gethash "KEY" current-case)
                        (hex-string-to-byte-vector (subseq line 6))))
                 ((starts-with "IV = " line)
                  (setf (gethash "IV" current-case)
                        (hex-string-to-byte-vector (subseq line 5))))
                 ((starts-with "CIPHERTEXT = " line)
                  (setf (gethash "CIPHERTEXT" current-case)
                        (bit-string-to-byte-vector (subseq line 12)))
		  (setf (gethash "CIPHERTEXT-BITS" current-case)
			(length (string-trim '(#\Space #\Tab #\Return #\Newline) (subseq line 12)))))
                 ((starts-with "PLAINTEXT = " line)
                  (setf (gethash "PLAINTEXT" current-case)
                        (bit-string-to-byte-vector (subseq line 11)))
		  (setf (gethash "PLAINTEXT-BITS" current-case)
			(length (string-trim '(#\Space #\Tab #\Return #\Newline) (subseq line 11))))
                  (format t "~%Parsed CFB1 test case ~D" (gethash "COUNT" current-case))
                  (push current-case cases)
                  (setf current-case (make-hash-table :test 'equal)))))))
      (nreverse cases))))

(defun parse192-gcm-rsp (filename)
  "Parses NIST AES-GCM encryption RSP file with header support. Returns list of test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current (make-hash-table :test 'equal))
          (header  (make-hash-table :test 'equal)))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ;; Header lines like [Taglen = 128], [AADlen = 160]
	      ((bracketed-line-p line)
	       (handler-case
		   (let* ((eq-pos (position #\= line))
			  ;; Safely slice the key from inside brackets
			  (raw-key (and eq-pos
					(string-trim '(#\[ #\] #\Space #\Tab #\Newline #\Return)
						     (subseq line 0 eq-pos))))
			  ;; Clean and parse the value (after '=' up to ']')
			  (raw-val (and eq-pos
					(string-trim '(#\[ #\] #\Space #\Tab #\Newline #\Return)
						     (subseq line (1+ eq-pos)))))
			  ;; Final key: consistent casing, no trailing space
			  (key (and raw-key raw-key))
			  ;; Attempt to parse value as integer
			  (value (and raw-val
				      (ignore-errors
					(parse-integer raw-val)))))
		     (when (and key value)
		       (setf (gethash key header) value)))
		 (error (e)
		   (format t "~%⚠️ Failed to parse header line: ~A -- ~A" line e))))
              ;; Blank line: reset header for the next block
              ((string= line "") nil)
              ;; Start of a new test case
              ((starts-with "Count = " line)
	       (setf (gethash "Count" current) (parse-integer (subseq line 8))))
              ((starts-with "Key = " line)
               (setf (gethash "Key" current)
                     (hex-string-to-byte-vector (subseq line 6))))
              ((starts-with "IV = " line)
               (setf (gethash "IV" current)
                     (hex-string-to-byte-vector (subseq line 5))))
              ((starts-with "PT = " line)
               (setf (gethash "Plaintext" current)
                     (hex-string-to-byte-vector (subseq line 5))))
              ((starts-with "AAD = " line)
               (setf (gethash "AAD" current)
                     (hex-string-to-byte-vector (subseq line 6))))
              ((starts-with "CT = " line)
               (setf (gethash "Ciphertext" current)
                     (hex-string-to-byte-vector (subseq line 5))))
              ((starts-with "Tag = " line)
               (setf (gethash "Tag" current)
                     (hex-string-to-byte-vector (subseq line 6)))
	       ;; Merge header into current immediately
	       (maphash (lambda (k v)
			  (setf (gethash k current) v))
			header)
               (push current cases)
               (setf current (make-hash-table :test 'equal)))))
      (nreverse cases))))

(defun parse192-gcm-rsp-decrypt (filename)
  "Parses NIST AES-GCM decryption RSP file with header support. Returns list of test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current (make-hash-table :test 'equal))
          (header  (make-hash-table :test 'equal)))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ;; Header lines
	      ((bracketed-line-p line)
	       (handler-case
		   (let* ((eq-pos (position #\= line))
			  ;; Safely slice the key from inside brackets
			  (raw-key (and eq-pos
					(string-trim '(#\[ #\] #\Space #\Tab #\Newline #\Return)
						     (subseq line 0 eq-pos))))
			  ;; Clean and parse the value (after '=' up to ']')
			  (raw-val (and eq-pos
					(string-trim '(#\[ #\] #\Space #\Tab #\Newline #\Return)
						     (subseq line (1+ eq-pos)))))
			  ;; Final key: consistent casing, no trailing space
			  (key (and raw-key raw-key))
			  ;; Attempt to parse value as integer
			  (value (and raw-val
				      (ignore-errors
					(parse-integer raw-val)))))
		     (when (and key value)
		       (setf (gethash key header) value)))
		 (error (e)
		   (format t "~%⚠️ Failed to parse header line: ~A -- ~A" line e))))
	      ;; Blank line: reset header
	      ((string= line "") nil)
	      ;; Start of a test case
	      ((starts-with "Count = " line)
	       (setf (gethash "Count" current) (parse-integer (subseq line 8))))
	      ((starts-with "Key = " line)
	       (setf (gethash "Key" current)
		     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "IV = " line)
	       (setf (gethash "IV" current)
		     (hex-string-to-byte-vector (subseq line 5))))
	      ((starts-with "CT = " line)
	       (setf (gethash "Ciphertext" current)
		     (hex-string-to-byte-vector (subseq line 5))))
	      ((starts-with "AAD = " line)
	       (setf (gethash "AAD" current)
		     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Tag = " line)
	       (setf (gethash "Tag" current)
		     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "PT = " line)
	       (setf (gethash "Plaintext" current)
		     (hex-string-to-byte-vector (subseq line 5)))
	       ;; Merge header values at beginning of case
	       (maphash (lambda (k v)
			  (setf (gethash k current) v))
                        header)
	       (push current cases)
	       (setf current (make-hash-table :test 'equal)))))
      (nreverse cases))))

(defun test-ecb192-rsp (filename)
  "Runs ECB encryption tests from a NIST .rsp file."
  (let ((cases (parse-ecb192-rsp filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let* ((key (gethash "KEY" case))
	     (plaintext (gethash "PLAINTEXT" case))
	     (expected-ciphertext (gethash "CIPHERTEXT" case))
	     (expanded-key (expand-key-192 key))
	     (ciphertext (aes192-ecb-encrypt plaintext expanded-key t)))
        (if (equalp ciphertext expected-ciphertext)
	    (incf pass)
	    (progn
	      (incf fail)
	      (format t "~%❌ ECB192 Encrypt Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ ECB192 Encrypt RSP Summary: ~D passed, ~D failed~%" pass fail)))

(defun test-ecb192-rsp-decrypt (filename)
  "Runs ECB decryption tests from a NIST .rsp file."
  (let ((cases (parse-ecb192-rsp-decrypt filename)) ; reuse your existing ECB parser
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let* ((key (gethash "KEY" case))
	     (expected-plaintext (gethash "PLAINTEXT" case))
	     (ciphertext (gethash "CIPHERTEXT" case))
	     (recovered (aes192-ecb-decrypt ciphertext key t)))
        (if (equalp recovered expected-plaintext)
	    (incf pass)
	    (progn
	      (incf fail)
	      (format t "~%❌ ECB192 Decrypt Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ ECB192 DECRYPT RSP Summary: ~D passed, ~D failed~%" pass fail)))

(defun test-cbc192-rsp (filename)
  (let ((cases (parse-cbc192-rsp filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let* ((key (gethash "KEY" case))
	     (iv (gethash "IV" case))
	     (plaintext (gethash "PLAINTEXT" case))
	     (expected-ciphertext (gethash "CIPHERTEXT" case))
	     (ciphertext (aes192-cbc-encrypt plaintext key iv t))
	     (recovered (aes192-cbc-decrypt ciphertext key iv t)))
        (if (and (equalp ciphertext expected-ciphertext)
                 (equalp plaintext recovered))
	    (incf pass)
	    (progn
	      (incf fail)
	      (format t "~%❌ CBC192 Encrypt Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ CBC192 Encrypt RSP Summary: ~D passed, ~D failed~%" pass fail)))

(defun test-cbc192-rsp-decrypt (filename)
  "Runs CBC decryption tests from a NIST .rsp file."
  (let ((cases (parse-cbc192-rsp-decrypt filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let* ((key (gethash "KEY" case))
	     (iv (gethash "IV" case))
	     (ciphertext (gethash "CIPHERTEXT" case))
	     (expected-plaintext (gethash "PLAINTEXT" case))
	     (recovered (aes192-cbc-decrypt ciphertext key iv t)))
        (if (equalp recovered expected-plaintext)
	    (incf pass)
	    (progn
	      (incf fail)
	      (format t "~%❌ CBC192 Decrypt Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ CBC192 DECRYPT RSP Summary: ~D passed, ~D failed~%" pass fail)))

(defun test-ctr192-rsp (filename)
  "Runs CTR encryption tests from a NIST .rsp file."
  (let ((cases (parse-ctr192-rsp filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let* ((key (gethash "KEY" case))
	     (iv (gethash "IV" case))
	     (plaintext (gethash "PLAINTEXT" case))
	     (expected-ciphertext (gethash "CIPHERTEXT" case))
	     (ciphertext (aes192-ctr-encrypt plaintext key iv)))
        (if (equalp ciphertext expected-ciphertext)
	    (incf pass)
	    (progn
	      (incf fail)
	      (format t "~%❌ CTR192 ENCRYPT Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ CTR192 ENCRYPT Summary: ~D passed, ~D failed~%" pass fail)))

(defun test-ctr192-rsp-decrypt (filename)
  "Runs CTR decryption tests from a NIST .rsp file."
  (let ((cases (parse-ctr192-rsp-decrypt filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let* ((key (gethash "KEY" case))
	     (iv (gethash "IV" case))
	     (ciphertext (gethash "CIPHERTEXT" case))
	     (expected-plaintext (gethash "PLAINTEXT" case))
	     (recovered (aes192-ctr-decrypt ciphertext key iv)))
        (if (equalp recovered expected-plaintext)
	    (incf pass)
	    (progn
	      (incf fail)
	      (format t "~%❌ CTR192 DECRYPT Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ CTR192 DECRYPT Summary: ~D passed, ~D failed~%" pass fail)))

(defun test-ofb192-rsp (filename)
  "Runs OFB128 encryption tests from a NIST .rsp file."
  (let ((cases (parse-ofb192-rsp filename)) ; use your parser here
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let* ((key (gethash "KEY" case))
	     (iv (gethash "IV" case))
	     (plaintext (gethash "PLAINTEXT" case))
	     (expected-ciphertext (gethash "CIPHERTEXT" case))
	     (ciphertext (aes192-ofb-encrypt plaintext key iv)))
        (if (equalp ciphertext expected-ciphertext)
	    (incf pass)
	    (progn
	      (incf fail)
	      (format t "~%❌ OFB192 ENCRYPT Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ OFB192 ENCRYPT Summary: ~D passed, ~D failed~%" pass fail)))

(defun test-ofb192-rsp-decrypt (filename)
  "Runs OFB192 decryption tests from a NIST .rsp file."
  (let ((cases (parse-ofb192-rsp-decrypt filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let* ((key (gethash "KEY" case))
	     (iv (gethash "IV" case))
	     (ciphertext (gethash "CIPHERTEXT" case))
	     (expected-plaintext (gethash "PLAINTEXT" case))
	     (recovered (aes192-ofb-decrypt ciphertext key iv)))
        (if (equalp recovered expected-plaintext)
	    (incf pass)
	    (progn
	      (incf fail)
	      (format t "~%❌ OFB192 DECRYPT Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ OFB192 DECRYPT Summary: ~D passed, ~D failed~%" pass fail)))

(defun test-cfb192-rsp (filename)
  "Runs CFB192 encryption tests from a NIST .rsp file."
  (let ((cases (parse-cfb192-rsp filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let* ((key (gethash "KEY" case))
	     (iv (gethash "IV" case))
	     (plaintext (gethash "PLAINTEXT" case))
	     (expected-ciphertext (gethash "CIPHERTEXT" case))
	     (ciphertext (aes192-cfb-encrypt plaintext key iv)))
        (if (equalp ciphertext expected-ciphertext)
	    (incf pass)
	    (progn
	      (incf fail)
	      (format t "~%❌ CFB192 ENCRYPT Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ CFB192 ENCRYPT Summary: ~D passed, ~D failed~%" pass fail)))

(defun test-cfb192-rsp-decrypt (filename)
  "Runs CFB128 decryption tests from a NIST .rsp file."
  (let ((cases (parse-cfb192-rsp-decrypt filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let* ((key (gethash "KEY" case))
	     (iv (gethash "IV" case))
	     (ciphertext (gethash "CIPHERTEXT" case))
	     (expected-plaintext (gethash "PLAINTEXT" case))
	     (recovered (aes192-cfb-decrypt ciphertext key iv)))
        (if (equalp recovered expected-plaintext)
	    (incf pass)
	    (progn
	      (incf fail)
	      (format t "~%❌ CFB192 DECRYPT Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ CFB192 DECRYPT Summary: ~D passed, ~D failed~%" pass fail)))

(defun test192-cfb8-rsp (filename)
  (let ((cases (parse192-cfb8-rsp filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let ((ciphertext (aes192-cfb8-xcrypt
                         (gethash "PLAINTEXT" case)
                         (gethash "KEY" case)
                         (gethash "IV" case))))
        (if (equalp ciphertext (gethash "CIPHERTEXT" case))
	    (incf pass)
	    (progn (incf fail)
		   (format t "~%❌ CFB8 ENCRYPT Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ CFB8 ENCRYPT Summary: ~D passed, ~D failed~%" pass fail)))

(defun test192-cfb8-rsp-decrypt (filename)
  (let ((cases (parse192-cfb8-rsp-decrypt filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let ((recovered (aes192-cfb8-xcrypt
                        (gethash "CIPHERTEXT" case)
                        (gethash "KEY" case)
                        (gethash "IV" case)
                        :decrypt t)))
        (if (equalp recovered (gethash "PLAINTEXT" case))
	    (incf pass)
	    (progn (incf fail)
		   (format t "~%❌ CFB8 DECRYPT Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ CFB8 DECRYPT Summary: ~D passed, ~D failed~%" pass fail)))

(defun test192-cfb1-rsp (filename)
  (let ((cases (parse192-cfb1-rsp filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let ((ciphertext (aes192-cfb1-xcrypt
                         (gethash "PLAINTEXT" case)
                         (gethash "KEY" case)
                         (gethash "IV" case)))
	    (bit-count (gethash "CIPHERTEXT-BITS" case)))
        (if (bits-equal-p ciphertext (gethash "CIPHERTEXT" case) bit-count)
	    (incf pass)
	    (progn (incf fail)
		   (format t "~%❌ CFB1 ENCRYPT Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ CFB1 ENCRYPT Summary: ~D passed, ~D failed~%" pass fail)))

(defun test192-cfb1-rsp-decrypt (filename)
  (let ((cases (parse192-cfb1-rsp-decrypt filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let ((recovered (aes192-cfb1-xcrypt
                        (gethash "CIPHERTEXT" case)
                        (gethash "KEY" case)
                        (gethash "IV" case)
                        :decrypt t))
	    (bit-count (gethash "PLAINTEXT-BITS" case)))
        (if (bits-equal-p recovered (gethash "PLAINTEXT" case) bit-count)
	    (incf pass)
	    (progn (incf fail)
		   (format t "~%❌ CFB1 DECRYPT Test ~D failed" (gethash "COUNT" case))))))
    (format t "~%✅ CFB1 DECRYPT Summary: ~D passed, ~D failed~%" pass fail)))

(defun test192-gcm-rsp (filename)
  "Runs AES-GCM encryption tests from NIST RSP file."
  (let ((cases (parse192-gcm-rsp filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let* ((taglen   (or (gethash "Taglen" case) 128))
	     (aad      (gethash "AAD" case))
	     (aad-len  (or (gethash "AADlen" case) (length aad)))
	     (pt       (gethash "Plaintext" case))
	     (ctlen    (length pt)))
        (multiple-value-bind (ct tag)
	    (aes192-gcm-encrypt pt
			     (gethash "Key" case)
			     (gethash "IV" case)
			     aad
			     taglen
			     aad-len
			     ctlen)
	  (if (and (equalp ct (gethash "Ciphertext" case))
		   (equalp tag (gethash "Tag" case)))
	      (progn
                (incf pass)
		(format t "~%Test ~D uses taglen: ~D aad-len: ~D and aad: ~A" (gethash "Count" case)
			(gethash "Taglen" case) (gethash "AADlen" case) (byte-vector-to-hex-string (gethash "AAD" case)))
                (format t "~%✅ Encrypt Test ~D passed with taglen: ~D aad-len: ~D and aad: ~A" (gethash "Count" case) (gethash "Taglen" case) (gethash "AADlen" case) (byte-vector-to-hex-string (gethash "AAD" case))))
	      (progn
                (incf fail)
                (format t "~%❌ Encrypt Test ~D failed with taglen: ~D aad-len: ~D and aad: ~A" (gethash "Count" case) (gethash "Taglen" case) (gethash "AADlen" case) (byte-vector-to-hex-string (gethash "AAD" case)))
		;; 🔍 Add this comparison logging here:
		(format t "~%Expected tag: ~S" (byte-vector-to-hex-string (gethash "Tag" case)))
		(format t "~%Computed tag: ~S" (byte-vector-to-hex-string tag)))))))
    (format t "~%🧾 AES192 GCM Encrypt Summary: ~D passed, ~D failed~%" pass fail)))

(defun test192-gcm-rsp-decrypt (filename)
  "Runs AES-GCM decryption tests from NIST RSP file."
  (let ((cases (parse192-gcm-rsp-decrypt filename))
        (pass 0)
        (fail 0))
    (dolist (case cases)
      (let* ((taglen   (or (gethash "Taglen" case) 128))
	     (aad      (gethash "AAD" case))
	     (aad-len  (or (gethash "AADlen" case) (length aad)))
	     (ct       (gethash "Ciphertext" case))
	     (ctlen    (length ct)))
        (handler-case
	    (let ((pt (aes192-gcm-decrypt ct
				       (gethash "Key" case)
				       (gethash "IV" case)
				       (gethash "Tag" case)
				       aad
				       taglen
				       aad-len
				       ctlen)))
	      (if (equalp pt (gethash "Plaintext" case))
		  (progn
		    (incf pass)
		    (format t "~%✅ Decrypt Test ~D passed" (gethash "Count" case)))
		  (progn
		    (incf fail)
		    (format t "~%❌ Decrypt Test ~D failed (mismatched plaintext)" (gethash "Count" case)))))
	  (error ()
	    (progn
	      (incf fail)
	      (format t "~%❌ Decrypt Test ~D failed (tag verification error)" (gethash "Count" case)))))))
    (format t "~%🧾 AES192 GCM Decrypt Summary: ~D passed, ~D failed~%" pass fail)))
