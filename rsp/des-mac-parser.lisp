(defpackage :des-mac-parser
  (:use :cl :parse-utils :shared-utils :des-utils)
  (:export :parse-ddes-cmac-rsp :parse-ddes-cmac-rsp-verify
	   :parse-tdes-cmac-rsp :parse-tdes-cmac-rsp-verify))

(in-package :des-mac-parser)

(defun parse-ddes-cmac-rsp (filename &optional verbose)
  "Parses a NIST CMAC128 .rsp file and returns a list of test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal)))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((string= line "") nil) ; skip blank lines
              ((starts-with "Count = " line)
               (setf (gethash "Count" current-case)
                     (parse-integer (subseq line 8))))
              ((starts-with "Klen = " line)
               (setf (gethash "Klen" current-case)
                     (parse-integer (subseq line 7))))
              ((starts-with "Mlen = " line)
	       (setf (gethash "Mlen" current-case)
                     (parse-integer (subseq line 7))))
              ((starts-with "Tlen = " line)
               (setf (gethash "Tlen" current-case)
                     (parse-integer (subseq line 7))))
	      ((starts-with "Key1 = " line)
               (setf (gethash "Key1" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Key2 = " line)
               (setf (gethash "Key2" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Key3 = " line)
               (setf (gethash "Key3" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
              ((starts-with "Msg = " line)
               (setf (gethash "Msg" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Mac = " line)
               (setf (gethash "Mac" current-case)
                     (hex-string-to-byte-vector (subseq line 6)))
	       (when verbose
		 (format t "~%Parsed CMAC128 test case ~D" (gethash "Count" current-case)))
               (push current-case cases)
               (setf current-case (make-hash-table :test 'equal)))))
      (nreverse cases))))

(defun parse-ddes-cmac-rsp-verify (filename &optional verbose)
  "Parses a NIST CMAC128 .rsp file and returns a list of test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal)))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((string= line "") nil) ; skip blank lines
              ((starts-with "Count = " line)
               (setf (gethash "Count" current-case)
                     (parse-integer (subseq line 8))))
              ((starts-with "Klen = " line)
               (setf (gethash "Klen" current-case)
                     (parse-integer (subseq line 7))))
              ((starts-with "Mlen = " line)
	       (setf (gethash "Mlen" current-case)
                     (parse-integer (subseq line 7))))
              ((starts-with "Tlen = " line)
               (setf (gethash "Tlen" current-case)
                     (parse-integer (subseq line 7))))
	      ((starts-with "Key1 = " line)
               (setf (gethash "Key1" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Key2 = " line)
               (setf (gethash "Key2" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Key3 = " line)
               (setf (gethash "Key3" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
              ((starts-with "Msg = " line)
               (setf (gethash "Msg" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Mac = " line)
               (setf (gethash "Mac" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Result = " line)
               (setf (gethash "Result" current-case)
		     (string-trim " " (subseq line (length "Result = "))))
	       (when verbose
		 (format t "~%Parsed CMAC128 test case ~D" (gethash "Count" current-case)))
               (push current-case cases)
               (setf current-case (make-hash-table :test 'equal)))))
      (nreverse cases))))

(defun parse-tdes-cmac-rsp (filename &optional verbose)
  "Parses a NIST CMAC128 .rsp file and returns a list of test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal)))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((string= line "") nil) ; skip blank lines
              ((starts-with "Count = " line)
               (setf (gethash "Count" current-case)
                     (parse-integer (subseq line 8))))
              ((starts-with "Klen = " line)
               (setf (gethash "Klen" current-case)
                     (parse-integer (subseq line 7))))
              ((starts-with "Mlen = " line)
	       (setf (gethash "Mlen" current-case)
                     (parse-integer (subseq line 7))))
              ((starts-with "Tlen = " line)
               (setf (gethash "Tlen" current-case)
                     (parse-integer (subseq line 7))))
	      ((starts-with "Key1 = " line)
               (setf (gethash "Key1" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Key2 = " line)
               (setf (gethash "Key2" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Key3 = " line)
               (setf (gethash "Key3" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
              ((starts-with "Msg = " line)
               (setf (gethash "Msg" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Mac = " line)
               (setf (gethash "Mac" current-case)
                     (hex-string-to-byte-vector (subseq line 6)))
	       (when verbose
		 (format t "~%Parsed CMAC128 test case ~D" (gethash "Count" current-case)))
               (push current-case cases)
               (setf current-case (make-hash-table :test 'equal)))))
      (nreverse cases))))

(defun parse-tdes-cmac-rsp-verify (filename &optional verbose)
  "Parses a NIST CMAC128 .rsp file and returns a list of test cases."
  (with-open-file (stream filename)
    (let ((cases '())
          (current-case (make-hash-table :test 'equal)))
      (loop for line = (read-line stream nil)
            while line do
            (cond
              ((string= line "") nil) ; skip blank lines
              ((starts-with "Count = " line)
               (setf (gethash "Count" current-case)
                     (parse-integer (subseq line 8))))
              ((starts-with "Klen = " line)
               (setf (gethash "Klen" current-case)
                     (parse-integer (subseq line 7))))
              ((starts-with "Mlen = " line)
	       (setf (gethash "Mlen" current-case)
                     (parse-integer (subseq line 7))))
              ((starts-with "Tlen = " line)
               (setf (gethash "Tlen" current-case)
                     (parse-integer (subseq line 7))))
	      ((starts-with "Key1 = " line)
               (setf (gethash "Key1" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Key2 = " line)
               (setf (gethash "Key2" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Key3 = " line)
               (setf (gethash "Key3" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
              ((starts-with "Msg = " line)
               (setf (gethash "Msg" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Mac = " line)
               (setf (gethash "Mac" current-case)
                     (hex-string-to-byte-vector (subseq line 6))))
	      ((starts-with "Result = " line)
               (setf (gethash "Result" current-case)
		     (string-trim " " (subseq line (length "Result = "))))
	       (when verbose
		 (format t "~%Parsed CMAC128 test case ~D" (gethash "Count" current-case)))
               (push current-case cases)
               (setf current-case (make-hash-table :test 'equal)))))
      (nreverse cases))))
