(defpackage :des-test
  (:use :cl :shared-utils :des-utils :des-padding :des-constants :des-core :des-file :des-api :double-des :triple-des)
  (:export :test-IP :test-pc1 :test-des-encryption :test-des-decryption
	   :test-des-cbc-encryption :test-des-cbc-decryption
	   :test-hex-ecb-roundtrip :test-hex-cbc-roundtrip :test-hex-cfb-roundtrip :test-hex-cfb8-roundtrip :test-hex-cfb1-roundtrip
	   :test-hex-ofb-roundtrip :test-hex-ctr-roundtrip
	   :test-string-ecb-roundtrip :test-string-cbc-roundtrip
	   :test-string-cfb-roundtrip :test-string-cfb8-roundtrip :test-string-cfb1-roundtrip
	   :test-string-ofb-roundtrip :test-string-ctr-roundtrip
	   :test-bytes-ecb-roundtrip :test-bytes-cbc-roundtrip
	   :test-bytes-cfb-roundtrip :test-bytes-cfb8-roundtrip :test-bytes-cfb1-roundtrip
	   :test-bytes-ofb-roundtrip :test-bytes-ctr-roundtrip
	   :test-string-base64-ecb-roundtrip :test-string-base64-cbc-roundtrip
	   :test-string-base64-cfb-roundtrip :test-string-base64-cfb8-roundtrip :test-string-base64-cfb1-roundtrip
	   :test-string-base64-ofb-roundtrip :test-string-base64-ctr-roundtrip
	   :test-cfb-mode :test-des-cfb-modes :des-test-stream-modes :run-all-des-tests))

(in-package :des-test)

;; IP is initial permutations
;; FP is final permutations
(defun test-IP ()
  (let ((block (make-array 64 :element-type '(unsigned-byte 8)
                           :initial-contents (loop for i below 64 collect i))))
    (map 'vector (lambda (i) (aref block (1- i))) +des-initial-permutation+)))

(defun test-FP ()
  (let ((block (make-array 64 :element-type '(unsigned-byte 8)
                           :initial-contents (loop for i below 64 collect i))))
    (map 'vector (lambda (i) (aref block (1- i)))  +des-final-permutation+)))

(defun test-pc1 ()
  (let ((input (make-array 64 :element-type '(unsigned-byte 8)
                           :initial-contents (loop for i from 1 to 64 collect i))))
    (map 'vector (lambda (i) (aref input (1- i))) +des-pc1+)))

(defun test-pc2 ()
  (let ((key (make-array 64 :element-type '(unsigned-byte 8)
                         :initial-contents (loop for i below 64 collect i))))
    (apply-pc2 key)))

;; Should return 48 bit
(defun test-expansion ()
  (let ((input (make-array 32 :element-type '(unsigned-byte 8)
                           :initial-contents (loop for i below 32 collect i))))
    (map 'vector (lambda (i) (aref input (1- i))) +des-expansion-table+)))

(defun test-sbox ()
  (let ((input #(0 1 1 0 1 0)) ;; Example 6-bit chunk
        (sbox (aref des-core::+des-sboxes+ 0))) ;; First S-box
    (let* ((row (+ (* (aref input 0) 2) (aref input 5)))
           (col (+ (* (aref input 1) 8)
                   (* (aref input 2) 4)
                   (* (aref input 3) 2)
                   (aref input 4)))
           (index (+ (* row 16) col))
           (value (aref sbox index)))
      (format t "S-box[~A][~A] = ~A~%" row col value))))

;; Should be 0b10101010 = 170
(defun test-bit-to-byte ()
  (let ((bits #(1 0 1 0 1 0 1 0)))
    (des-utils::bit-vector-to-byte-vector bits)))

;; Should return #(1 0 1 0 1 0 1 0)
(defun test-byte-to-bit ()
  (des-utils::byte-vector-to-bit-vector #(170)))

(defun test-permutation-p-table ()
  (assert (des-utils::permutation-p des-core::+des-permutation-p+ 32)
          () "Permutation P table is invalid"))

(defun test-pc1-round-keys ()
  (let ((key56 (test-pc1)))
    (multiple-value-bind (C0 D0) (split-key key56)
      (let ((cd-vectors (generate-cd-pairs C0 D0)))
	(loop for i from 1 to 16
              for cd in cd-vectors
              do (format t "PC1 Round ~2D: CD = ~A~%" i cd))))))

(defparameter *cd-rounds* nil)

(defparameter *round-keys*
  (map 'vector #'apply-pc2 *cd-rounds*))

(defun test-pc2-round-keys ()
  (dotimes (i 16)
    (format t "PC2 Round ~2D Key: ~S~%" (1+ i) (aref *round-keys* i))))

(defparameter *test-key*
  (hex-string-to-byte-vector "133457799BBCDFF1")) ;; classic DES test key

(defparameter *test-key-bits* (byte-vector-to-bit-vector *test-key*))

(defparameter *test-plaintext*
  (hex-string-to-byte-vector "0123456789ABCDEF")) ;; classic test input

(defparameter *test-plaintext-bits* (byte-vector-to-bit-vector *test-plaintext*))

(defun test-des-encryption ()
  (let ((block (make-array 64 :element-type '(unsigned-byte 8)
                           :initial-contents (loop for i below 64 collect (mod i 2)))))
    (format t "Plaintext: ~A~%" block)
    (let ((cipher (des-ecb-encrypt-block block *round-keys*)))
      (format t "Ciphertext: ~A~%" cipher))))

(defun test-des-decryption ()
  (let ((block (make-array 64 :element-type '(unsigned-byte 8)
                           :initial-contents (loop for i below 64 collect (mod i 2)))))
    (format t "Plaintext: ~A~%" block)
    (let ((cipher (des-ecb-decrypt-block block *round-keys*)))
      (format t "Ciphertext: ~A~%" cipher))))

(defparameter *cbc-key* *test-key-bits*) ; already a 64-bit bit vector
(defparameter *cbc-iv* (make-array 64 :element-type '(unsigned-byte 8)
                                   :initial-contents (loop for i below 64 collect 0))) ;; all-zero IV

(defparameter *cbc-plaintext-blocks*
  (list
   (byte-vector-to-bit-vector (hex-string-to-byte-vector "0123456789ABCDEF"))
   (byte-vector-to-bit-vector (hex-string-to-byte-vector "1111111111111111"))
   (byte-vector-to-bit-vector (hex-string-to-byte-vector "2222222222222222"))))

(defun test-des-cbc-encryption ()
  (let ((cipher-blocks (des-cbc-encrypt *cbc-plaintext-blocks* *cbc-key* *cbc-iv*)))
    (format t "~%CBC Encrypted Blocks:~%")
    (loop for block in cipher-blocks
          for i from 1
          do (format t "Block ~D: ~{~2,'0X~^ ~}~%" i (coerce (bit-vector-to-byte-vector block) 'list)))
    cipher-blocks))

(defun test-des-cbc-decryption ()
  (let ((cipher-blocks (test-des-cbc-encryption))) ; reuse encryption output
    (let ((plain-blocks (des-cbc-decrypt cipher-blocks *cbc-key* *cbc-iv*)))
      (format t "~%CBC Decrypted Blocks:~%")
      (loop for block in plain-blocks
            for i from 1
            do (format t "Block ~D: ~{~2,'0X~^ ~}~%" i (coerce (bit-vector-to-byte-vector block) 'list)))
      plain-blocks)))

(defun test-hex-ecb-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
         (plaintext "Hello ECB hex World!")
	 (hex (des-utils::byte-vector-to-hex-string (des-utils::string-to-byte-vector plaintext)))
         (ciphertext (des-api::encrypt-hex-ecb hex key))
         (decrypted (des-api::decrypt-hex-ecb ciphertext key)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-hex-ecb hex key t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-hex-cbc-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CBC hex World!")
	 (hex (des-utils::byte-vector-to-hex-string (des-utils::string-to-byte-vector plaintext)))
         (ciphertext (des-api::encrypt-hex-cbc hex key iv))
         (decrypted (des-api::decrypt-hex-cbc ciphertext key iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-hex-cbc hex key iv t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-hex-cfb-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CFB hex World!")
	 (hex (des-utils::byte-vector-to-hex-string (des-utils::string-to-byte-vector plaintext)))
         (ciphertext (des-api::encrypt-hex-cfb hex key iv))
         (decrypted (des-api::decrypt-hex-cfb ciphertext key iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-hex-cfb hex key iv t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-hex-cfb8-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CFB8 hex World!")
	 (hex (des-utils::byte-vector-to-hex-string (des-utils::string-to-byte-vector plaintext)))
         (ciphertext (des-api::encrypt-hex-cfb8 hex key iv))
         (decrypted (des-api::decrypt-hex-cfb8 ciphertext key iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-hex-cfb8 hex key iv t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-hex-cfb1-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CFB1 hex World!")
	 (hex (des-utils::byte-vector-to-hex-string (des-utils::string-to-byte-vector plaintext)))
         (ciphertext (des-api::encrypt-hex-cfb1 hex key iv))
         (decrypted (des-api::decrypt-hex-cfb1 ciphertext key iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-hex-cfb1 hex key iv t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-hex-ofb-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello OFB hex World!")
	 (hex (des-utils::byte-vector-to-hex-string (des-utils::string-to-byte-vector plaintext)))
         (ciphertext (des-api::encrypt-hex-ofb hex key iv))
         (decrypted (des-api::decrypt-hex-ofb ciphertext key iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-hex-ofb hex key iv t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-hex-ctr-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CTR hex World!")
	 (hex (des-utils::byte-vector-to-hex-string (des-utils::string-to-byte-vector plaintext)))
         (ciphertext (des-api::encrypt-hex-ctr hex key iv))
         (decrypted (des-api::decrypt-hex-ctr ciphertext key iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-hex-ctr hex key iv t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-string-ecb-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
         (plaintext "Hello ECB string World!")
         (ciphertext (des-api::encrypt-string-ecb plaintext key))
         (decrypted (des-api::decrypt-string-ecb ciphertext key)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-string-ecb plaintext key t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-string-cbc-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CBC string World!")
         (ciphertext (des-api::encrypt-string-cbc plaintext key iv))
         (decrypted (des-api::decrypt-string-cbc ciphertext key iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-string-cbc plaintext key iv t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-string-cfb-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CFB string World!")
         (ciphertext (des-api::encrypt-string-cfb plaintext key iv))
         (decrypted (des-api::decrypt-string-cfb ciphertext key iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-string-cfb plaintext key iv t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-string-cfb8-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CFB8 string World!")
         (ciphertext (des-api::encrypt-string-cfb8 plaintext key iv))
         (decrypted (des-api::decrypt-string-cfb8 ciphertext key iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-string-cfb8 plaintext key iv t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-string-cfb1-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CFB1 string World!")
         (ciphertext (des-api::encrypt-string-cfb1 plaintext key iv))
         (decrypted (des-api::decrypt-string-cfb1 ciphertext key iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-string-cfb1 plaintext key iv t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-string-ofb-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello OFB string World!")
         (ciphertext (des-api::encrypt-string-ofb plaintext key iv))
         (decrypted (des-api::decrypt-string-ofb ciphertext key iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-string-ofb plaintext key iv t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-string-ctr-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CTR string World!")
         (ciphertext (des-api::encrypt-string-ctr plaintext key iv))
         (decrypted (des-api::decrypt-string-ctr ciphertext key iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-string-ctr plaintext key iv t))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-bytes-ecb-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
         (plaintext "Hello ECB bytes World!")
         (bytes (des-utils::string-to-byte-vector plaintext))
         (ciphertext (des-api::encrypt-bytes-ecb bytes key))
         (decrypted (des-api::decrypt-bytes-ecb ciphertext key))
	 (result (des-utils::byte-vector-to-string decrypted)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-bytes-ecb bytes key t))
    (format t "Decrypted: ~A~%" result)
    (string= plaintext result)))

(defun test-bytes-cbc-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CBC bytes World!")
         (bytes (des-utils::string-to-byte-vector plaintext))
         (ciphertext (des-api::encrypt-bytes-cbc bytes key iv))
         (decrypted (des-api::decrypt-bytes-cbc ciphertext key iv))
	 (result (des-utils::byte-vector-to-string decrypted)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-bytes-cbc bytes key iv t))
    (format t "Decrypted: ~A~%" result)
    (string= plaintext result)))

(defun test-bytes-cfb-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CFB bytes World!")
         (bytes (des-utils::string-to-byte-vector plaintext))
         (ciphertext (des-api::encrypt-bytes-cfb bytes key iv))
         (decrypted (des-api::decrypt-bytes-cfb ciphertext key iv))
	 (result (des-utils::byte-vector-to-string decrypted)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-bytes-cfb bytes key iv t))
    (format t "Decrypted: ~A~%" result)
    (string= plaintext result)))

(defun test-bytes-cfb8-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CFB8 bytes World!")
         (bytes (des-utils::string-to-byte-vector plaintext))
         (ciphertext (des-api::encrypt-bytes-cfb8 bytes key iv))
         (decrypted (des-api::decrypt-bytes-cfb8 ciphertext key iv))
	 (result (des-utils::byte-vector-to-string decrypted)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-bytes-cfb8 bytes key iv t))
    (format t "Decrypted: ~A~%" result)
    (string= plaintext result)))

(defun test-bytes-cfb1-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CFB1 bytes World!")
         (bytes (des-utils::string-to-byte-vector plaintext))
         (ciphertext (des-api::encrypt-bytes-cfb1 bytes key iv))
         (decrypted (des-api::decrypt-bytes-cfb1 ciphertext key iv))
	 (result (des-utils::byte-vector-to-string decrypted)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-bytes-cfb1 bytes key iv t))
    (format t "Decrypted: ~A~%" result)
    (string= plaintext result)))

(defun test-bytes-ofb-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello OFB bytes World!")
         (bytes (des-utils::string-to-byte-vector plaintext))
         (ciphertext (des-api::encrypt-bytes-ofb bytes key iv))
         (decrypted (des-api::decrypt-bytes-ofb ciphertext key iv))
	 (result (des-utils::byte-vector-to-string decrypted)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-bytes-ofb bytes key iv t))
    (format t "Decrypted: ~A~%" result)
    (string= plaintext result)))

(defun test-bytes-ctr-roundtrip ()
  (let* ((key (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(1 2 3 4 5 6 7 8)))
	 (iv (make-array 8 :element-type '(unsigned-byte 8) :initial-contents '(0 0 0 0 0 0 0 0)))
         (plaintext "Hello CTR bytes World!")
         (bytes (des-utils::string-to-byte-vector plaintext))
         (ciphertext (des-api::encrypt-bytes-ctr bytes key iv))
         (decrypted (des-api::decrypt-bytes-ctr ciphertext key iv))
	 (result (des-utils::byte-vector-to-string decrypted)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (des-api::encrypt-bytes-ctr bytes key iv t))
    (format t "Decrypted: ~A~%" result)
    (string= plaintext result)))

(defun test-string-base64-ecb-roundtrip ()
  (let* ((key #(1 2 3 4 5 6 7 8))
         (plaintext "Hello ECB Base64 string World!")
         (ciphertext (des-api::encrypt-string-base64-ecb plaintext key))
         (decrypted (des-api::decrypt-string-base64-ecb ciphertext key)))
    (format t "Original:      ~A~%" plaintext)
    (format t "Base64 Cipher: ~A~%" ciphertext)
    (format t "Decrypted:     ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-string-base64-cbc-roundtrip ()
  (let* ((key #(1 2 3 4 5 6 7 8))
         (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello CBC Base64 string World!")
         (ciphertext (des-api::encrypt-string-base64-cbc plaintext key iv))
         (decrypted (des-api::decrypt-string-base64-cbc ciphertext key iv)))
    (format t "Original:      ~A~%" plaintext)
    (format t "Base64 Cipher: ~A~%" ciphertext)
    (format t "Decrypted:     ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-string-base64-cfb-roundtrip ()
  (let* ((key #(1 2 3 4 5 6 7 8))
         (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello CFB Base64 string World!")
         (ciphertext (des-api::encrypt-string-base64-cfb plaintext key iv))
         (decrypted (des-api::decrypt-string-base64-cfb ciphertext key iv)))
    (format t "Original:      ~A~%" plaintext)
    (format t "Base64 Cipher: ~A~%" ciphertext)
    (format t "Decrypted:     ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-string-base64-cfb8-roundtrip ()
  (let* ((key #(1 2 3 4 5 6 7 8))
         (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello CFB8 Base64 string World!")
         (ciphertext (des-api::encrypt-string-base64-cfb8 plaintext key iv))
         (decrypted (des-api::decrypt-string-base64-cfb8 ciphertext key iv)))
    (format t "Original:      ~A~%" plaintext)
    (format t "Base64 Cipher: ~A~%" ciphertext)
    (format t "Decrypted:     ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-string-base64-cfb1-roundtrip ()
  (let* ((key #(1 2 3 4 5 6 7 8))
         (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello CFB1 Base64 string World!")
         (ciphertext (des-api::encrypt-string-base64-cfb1 plaintext key iv))
         (decrypted (des-api::decrypt-string-base64-cfb1 ciphertext key iv)))
    (format t "Original:      ~A~%" plaintext)
    (format t "Base64 Cipher: ~A~%" ciphertext)
    (format t "Decrypted:     ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-string-base64-ofb-roundtrip ()
  (let* ((key #(1 2 3 4 5 6 7 8))
         (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello OFB Base64 string World!")
         (ciphertext (des-api::encrypt-string-base64-ofb plaintext key iv))
         (decrypted (des-api::decrypt-string-base64-ofb ciphertext key iv)))
    (format t "Original:      ~A~%" plaintext)
    (format t "Base64 Cipher: ~A~%" ciphertext)
    (format t "Decrypted:     ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-string-base64-ctr-roundtrip ()
  (let* ((key #(1 2 3 4 5 6 7 8))
         (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello CTR Base64 string World!")
         (ciphertext (des-api::encrypt-string-base64-ctr plaintext key iv))
         (decrypted (des-api::decrypt-string-base64-ctr ciphertext key iv)))
    (format t "Original:      ~A~%" plaintext)
    (format t "Base64 Cipher: ~A~%" ciphertext)
    (format t "Decrypted:     ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-cfb-mode ()
  (let* ((key #(49 50 51 52 53 54 55 56)) ; "12345678"
         (iv  #(97 98 99 100 101 102 103 104)) ; "abcdefgh"
         (plaintext (map 'vector #'char-code "The quick brown fox jumps over the lazy dog"))
	 (blocks (split-into-blocks plaintext 8))
         (ciphertext (des-cfb-encrypt-plain blocks key iv))
         (decrypted (des-cfb-decrypt-plain ciphertext key iv)))
    (format t "Plaintext: ~A~%" (map 'string #'code-char plaintext))
    (format t "Ciphertext (hex): ~{~2,'0X~}~&" (coerce (apply #'concatenate 'vector ciphertext) 'list)) ;; flatten and list
    (format t "Decrypted: ~A~%" (map 'string #'code-char decrypted))
    (equalp (coerce plaintext 'vector)
	    (coerce decrypted 'vector))))

(defun test-des-cfb-modes ()
  (let* ((key #(49 50 51 52 53 54 55 56)) ; "12345678"
         (iv  #(97 98 99 100 101 102 103 104)) ; "abcdefgh"
         (plaintext (map 'vector #'char-code "The quick brown fox jumps over the lazy dog"))
         (blocks (split-into-blocks plaintext 8)))

    ;; CFB-64
    (format t "~%--- Testing DES-CFB-64 ---~%")
    (let* ((ciphertext64 (des-cfb-encrypt-plain blocks key iv))
           (decrypted64 (des-cfb-decrypt-plain ciphertext64 key iv)))
      (format t "Decrypted: ~A~%" (map 'string #'code-char decrypted64))
      (unless (equalp (coerce plaintext 'vector) (coerce decrypted64 'vector))
      (format t "Match: ~A~%" (equalp (coerce plaintext 'vector) (coerce decrypted64 'vector)))))

    ;; CFB-8
    (format t "~%--- Testing DES-CFB-8 ---~%")
    (let* ((ciphertext8 (des-cfb8-encrypt-plain plaintext key iv))
           (decrypted8 (des-cfb8-decrypt-plain ciphertext8 key iv)))
      (format t "Decrypted: ~A~%" (map 'string #'code-char decrypted8))
      (unless (equalp (coerce plaintext 'vector) (coerce decrypted8 'vector))
      (format t "Match: ~A~%" (equalp (coerce plaintext 'vector) (coerce decrypted8 'vector)))))

    ;; CFB-1
    (format t "~%--- Testing DES-CFB-1 ---~%")
    (let* ((bitstream (loop for byte across plaintext
                            append (loop for i from 7 downto 0
                                         collect (ldb (byte 1 i) byte))))
           (cipherbits (des-cfb1-encrypt-plain bitstream key iv))
           (decryptedbits (des-cfb1-decrypt-plain cipherbits key iv))
           (reconstructed (make-array 0 :element-type '(unsigned-byte 8)
                                      :adjustable t :fill-pointer t)))
      ;; Reconstruct bytes from bits
      (loop for i from 0 below (length decryptedbits) by 8 do
           (let ((byte (reduce (lambda (acc b) (+ (* acc 2) b))
                               (subseq decryptedbits i (+ i 8)))))
             (vector-push-extend byte reconstructed)))
      (format t "Decrypted: ~A~%" (map 'string #'code-char reconstructed))
      (unless (equalp (coerce plaintext 'vector) (coerce reconstructed 'vector))
      (format t "Match: ~A~%" (equalp (coerce plaintext 'vector) (coerce reconstructed 'vector)))))
    t)) ;; if we made it to here everything passed

(defun des-test-stream-modes (plaintext key iv)
  (format t "~%--- Testing Stream Modes ---~%")
  (format t "Plaintext: ~A~%" plaintext)

  ;; CFB
  (let* ((blocks (chunk-vector plaintext 8))
	(cfb-encrypted (des-cfb-encrypt-plain blocks key iv))
        (cfb-decrypted (des-cfb-decrypt-plain
                        (des-cfb-encrypt-plain blocks key iv) key iv)))
    (format t "~%[CFB] Encrypted: ~A~%" cfb-encrypted)
    (format t "[CFB] Decrypted: ~A~%" cfb-decrypted)
    (when (equalp cfb-encrypted cfb-decrypted)
      (format t "Match: ~A~%" (equalp cfb-encrypted cfb-decrypted))))

  ;; OFB
  (let* ((ofb-encrypted (des-ofb-encrypt-plain plaintext key iv))
        (ofb-decrypted (des-ofb-decrypt-plain
                        (des-ofb-encrypt-plain plaintext key iv) key iv)))
    (format t "~%[OFB] Encrypted: ~A~%" ofb-encrypted)
    (format t "[OFB] Decrypted: ~A~%" ofb-decrypted)
    (when (equalp ofb-encrypted ofb-decrypted)
      (format t "Match: ~A~%" (equalp ofb-encrypted ofb-decrypted))))

  ;; CTR
  (let* ((ctr-encrypted (des-ctr-encrypt-plain plaintext key iv))
        (ctr-decrypted (des-ctr-decrypt-plain
                        (des-ctr-encrypt-plain plaintext key iv) key iv)))
    (format t "~%[CTR] Encrypted: ~A~%" ctr-encrypted)
    (format t "[CTR] Decrypted: ~A~%" ctr-decrypted)
    (when (equalp ctr-encrypted ctr-decrypted)
      (format t "Match: ~A~%" (equalp ctr-encrypted ctr-decrypted))))
  t) ;; if we got here everything passed

(defun test-double-des-ecb-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
         (plaintext "Hello Double DES ECB World!")
         (cipher (double-des-ecb-encrypt plaintext key1 key2))
         (decrypted (double-des-ecb-decrypt cipher key1 key2)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (apply #'concatenate 'string (mapcar #'des-utils::byte-vector-to-hex-string cipher)))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-double-des-cbc-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
	 (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello Double DES CBC World!")
         (cipher (double-des-cbc-encrypt plaintext key1 key2 iv))
         (decrypted (byte-vector-to-string (double-des-cbc-decrypt cipher key1 key2 iv))))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (byte-vector-to-hex-string cipher))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-double-des-cfb-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
	 (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello Double DES CFB World!")
         (cipher (double-des-cfb-encrypt plaintext key1 key2 iv))
         (decrypted (double-des-cfb-decrypt cipher key1 key2 iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (apply #'concatenate 'string (mapcar #'des-utils::byte-vector-to-hex-string cipher)))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-double-des-cfb8-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
	 (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello Double DES CFB8 World!")
         (cipher (double-des-cfb8-encrypt plaintext key1 key2 iv))
         (decrypted (double-des-cfb8-decrypt cipher key1 key2 iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (byte-vector-to-hex-string cipher))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-double-des-cfb1-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
	 (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello Double DES CFB1 World!")
         (cipher (double-des-cfb1-encrypt plaintext key1 key2 iv))
         (decrypted (double-des-cfb1-decrypt cipher key1 key2 iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (string-to-hex cipher))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-double-des-ofb-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
	 (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello Double DES OFB World!")
         (cipher (double-des-ofb-encrypt plaintext key1 key2 iv))
         (decrypted (double-des-ofb-decrypt cipher key1 key2 iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (byte-vector-to-hex-string cipher))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-double-des-ctr-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
	 (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello Double DES CTR World!")
         (cipher (double-des-ctr-encrypt plaintext key1 key2 iv))
         (decrypted (double-des-ctr-decrypt cipher key1 key2 iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (byte-vector-to-hex-string cipher))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-triple-des-ecb-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
         (key3 #(42 42 42 42 42 42 42 42))
         (plaintext "Hello Triple DES ECB World!")
         (cipher (triple-des-ecb-encrypt plaintext key1 key2 key3))
         (decrypted (triple-des-ecb-decrypt cipher key1 key2 key3)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (apply #'concatenate 'string (mapcar #'des-utils::byte-vector-to-hex-string cipher)))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-triple-des-cbc-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
         (key3 #(42 42 42 42 42 42 42 42))
	 (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello Triple DES CBC World!")
         (cipher (triple-des-cbc-encrypt plaintext key1 key2 key3 iv))
         (decrypted (byte-vector-to-string (triple-des-cbc-decrypt cipher key1 key2 key3 iv))))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (byte-vector-to-hex-string cipher))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-triple-des-cfb-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
         (key3 #(42 42 42 42 42 42 42 42))
	 (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello Triple DES CFB World!")
         (cipher (triple-des-cfb-encrypt plaintext key1 key2 key3 iv))
         (decrypted (triple-des-cfb-decrypt cipher key1 key2 key3 iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (apply #'concatenate 'string (mapcar #'des-utils::byte-vector-to-hex-string cipher)))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-triple-des-cfb8-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
         (key3 #(42 42 42 42 42 42 42 42))
	 (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello Triple DES CFB8 World!")
         (cipher (triple-des-cfb8-encrypt plaintext key1 key2 key3 iv))
         (decrypted (triple-des-cfb8-decrypt cipher key1 key2 key3 iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (byte-vector-to-hex-string cipher))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-triple-des-cfb1-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
         (key3 #(42 42 42 42 42 42 42 42))
	 (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello Triple DES CFB1 World!")
         (cipher (triple-des-cfb1-encrypt plaintext key1 key2 key3 iv))
         (decrypted (triple-des-cfb1-decrypt cipher key1 key2 key3 iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (string-to-hex cipher))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-triple-des-ofb-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
         (key3 #(42 42 42 42 42 42 42 42))
	 (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello Triple DES OFB World!")
         (cipher (triple-des-ofb-encrypt plaintext key1 key2 key3 iv))
         (decrypted (triple-des-ofb-decrypt cipher key1 key2 key3 iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (byte-vector-to-hex-string cipher))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun test-triple-des-ctr-roundtrip ()
  (let* ((key1 #(1 2 3 4 5 6 7 8))
         (key2 #(8 7 6 5 4 3 2 1))
         (key3 #(42 42 42 42 42 42 42 42))
	 (iv #(0 0 0 0 0 0 0 0))
         (plaintext "Hello Triple DES CTR World!")
         (cipher (triple-des-ctr-encrypt plaintext key1 key2 key3 iv))
         (decrypted (triple-des-ctr-decrypt cipher key1 key2 key3 iv)))
    (format t "Original:  ~A~%" plaintext)
    (format t "Cipher:    ~A~%" (byte-vector-to-hex-string cipher))
    (format t "Decrypted: ~A~%" decrypted)
    (string= plaintext decrypted)))

(defun run-all-des-tests ()
  (let ((results
         `(("Hex ECB" . ,(test-hex-ecb-roundtrip))
           ("Hex CBC" . ,(test-hex-cbc-roundtrip))
	   ("Hex CFB" . ,(test-hex-cfb-roundtrip))
	   ("Hex CFB8" . ,(test-hex-cfb8-roundtrip))
	   ("Hex CFB1" . ,(test-hex-cfb1-roundtrip))
	   ("Hex OFB" . ,(test-hex-ofb-roundtrip))
	   ("Hex CTR" . ,(test-hex-ctr-roundtrip))
           ("String ECB" . ,(test-string-ecb-roundtrip))
           ("String CBC" . ,(test-string-cbc-roundtrip))
	   ("String CFB" . ,(test-string-cfb-roundtrip))
	   ("String CFB8" . ,(test-string-cfb8-roundtrip))
	   ("String CFB1" . ,(test-string-cfb1-roundtrip))
	   ("String OFB" . ,(test-string-ofb-roundtrip))
	   ("String CTR" . ,(test-string-ctr-roundtrip))
           ("Bytes ECB" . ,(test-bytes-ecb-roundtrip))
           ("Bytes CBC" . ,(test-bytes-cbc-roundtrip))
	   ("Bytes CFB" . ,(test-bytes-cfb-roundtrip))
	   ("Bytes CFB8" . ,(test-bytes-cfb8-roundtrip))
	   ("Bytes CFB1" . ,(test-bytes-cfb1-roundtrip))
	   ("Bytes OFB" . ,(test-bytes-ofb-roundtrip))
	   ("Bytes CTR" . ,(test-bytes-ctr-roundtrip))
	   ("String Base64 ECB" . ,(test-string-base64-ecb-roundtrip))
	   ("String Base64 CBC" . ,(test-string-base64-cbc-roundtrip))
	   ("String Base64 CFB" . ,(test-string-base64-cfb-roundtrip))
	   ("String Base64 CFB8" . ,(test-string-base64-cfb8-roundtrip))
	   ("String Base64 CFB1" . ,(test-string-base64-cfb1-roundtrip))
	   ("String Base64 OFB" . ,(test-string-base64-ofb-roundtrip))
	   ("String Base64 CTR" . ,(test-string-base64-ctr-roundtrip))
	   ("File ECB singleline" . ,(test-file-ecb-roundtrip))
	   ("File ECB multiline" . ,(test-file-ecb-roundtrip-multiline))
	   ("File CBC singleline" . ,(test-file-cbc-roundtrip))
	   ("File CBC multiline" . ,(test-file-cbc-roundtrip-multiline))
	   ("File CFB singleline" . ,(test-file-cfb-roundtrip))
	   ("File CFB multiline" . ,(test-file-cfb-roundtrip-multiline))
	   ("File CFB8 singleline" . ,(test-file-cfb8-roundtrip))
	   ("File CFB8 multiline" . ,(test-file-cfb8-roundtrip-multiline))
	   ("File CFB1 singleline" . ,(test-file-cfb1-roundtrip))
	   ("File CFB1 multiline" . ,(test-file-cfb1-roundtrip-multiline))
	   ("File OFB singleline" . ,(test-file-ofb-roundtrip))
	   ("File OFB multiline" . ,(test-file-ofb-roundtrip-multiline))
	   ("File CTR singleline" . ,(test-file-ctr-roundtrip))
	   ("File CTR multiline" . ,(test-file-ctr-roundtrip-multiline))
	   ("File Base64 ECB singleline" . ,(test-file-base64-ecb-roundtrip))
	   ("File Base64 ECB multiline" . ,(test-file-base64-ecb-roundtrip-multiline))
	   ("File Base64 CBC singleline" . ,(test-file-base64-cbc-roundtrip))
	   ("File Base64 CBC multiline" . ,(test-file-base64-cbc-roundtrip-multiline))
	   ("File Base64 CFB singleline" . ,(test-file-base64-cfb-roundtrip))
	   ("File Base64 CFB multiline" . ,(test-file-base64-cfb-roundtrip-multiline))
	   ("File Base64 CFB8 singleline" . ,(test-file-base64-cfb8-roundtrip))
	   ("File Base64 CFB8 multiline" . ,(test-file-base64-cfb8-roundtrip-multiline))
	   ("File Base64 CFB1 singleline" . ,(test-file-base64-cfb1-roundtrip))
	   ("File Base64 CFB1 multiline" . ,(test-file-base64-cfb1-roundtrip-multiline))
	   ("File Base64 OFB singleline" . ,(test-file-base64-ofb-roundtrip))
	   ("File Base64 OFB multiline" . ,(test-file-base64-ofb-roundtrip-multiline))
	   ("File Base64 CTR singleline" . ,(test-file-base64-ctr-roundtrip))
	   ("File Base64 CTR multiline" . ,(test-file-base64-ctr-roundtrip-multiline))
	   ("CFB Mode 8byte (64bit)" . ,(test-cfb-mode))
	   ("CFB Modes" . ,(test-des-cfb-modes))
	   ("Stream modes" . ,(des-test-stream-modes #(65 66 67 68 69 70 71 72)  ;; "ABCDEFGH"
						     #(1 2 3 4 5 6 7 8)          ;; 64-bit key
						     #(9 10 11 12 13 14 15 16))) ;; 64-bit IV
	   ("Double DES ECB test" . ,(test-double-des-ecb-roundtrip))
	   ("Triple DES ECB test" . ,(test-triple-des-ecb-roundtrip))
	   ("Double DES CBC test" . ,(test-double-des-cbc-roundtrip))
	   ("Triple DES CBC test" . ,(test-triple-des-cbc-roundtrip))
	   ("Double DES CFB test" . ,(test-double-des-cfb-roundtrip))
	   ("Triple DES CFB test" . ,(test-triple-des-cfb-roundtrip))
	   ("Double DES CFB8 test" . ,(test-double-des-cfb8-roundtrip))
	   ("Triple DES CFB8 test" . ,(test-triple-des-cfb8-roundtrip))
	   ("Double DES CFB1 test" . ,(test-double-des-cfb1-roundtrip))
	   ("Triple DES CFB1 test" . ,(test-triple-des-cfb1-roundtrip))
	   ("Double DES OFB test" . ,(test-double-des-ofb-roundtrip))
	   ("Triple DES OFB test" . ,(test-triple-des-ofb-roundtrip))
	   ("Double DES CTR test" . ,(test-double-des-ctr-roundtrip))
	   ("Triple DES CTR test" . ,(test-triple-des-ctr-roundtrip))
	   )))
    (format t "~%DES Roundtrip Test Results:~%")
    (dolist (result results)
      (format t "~A: ~A~%" (car result) (if (cdr result) "✅ Pass" "❌ Fail")))))
